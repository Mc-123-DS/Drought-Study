setwd("C:/Users/.../Drought data study")

library(readxl)
df <- read_excel("Predictors_Copying to droughts new.xls")
View(df)

#/descriptive stats for continuous variable 
mean(df$`Number of animals died`)
median(df$`Number of animals died`)
require(modeest)
mfv(df$`Number of animals died`) #mode
min(df$`Number of animals died`)
max(df$`Number of animals died`)
#range(df$Age)
quantile(df$`Number of animals died`)
IQR(df$`Number of animals died`)
var(df$Age)
sd(df$Age)

##USE this method
summary(df$`Number of animals sold`)
library(pastecs)
res <- stat.desc(df$`Age`) 
round(res,2)

#PLOTS
#Histogram AGE variable
hist(df$`Number of animals died`, main = "Histogram of animals that died")
xfit<-seq(min(df$`Number of animals died`),max(df$`Number of animals died`))
# Kernel Density Plot
d <- density(df$`Number of animals died`) # returns the density data
plot(d,main = "Density plot of animals that died") # plots the results
#QQ plot
qqnorm(df$`Number of animals died`)
qqline(df$`Number of animals died`)

#histogram with normal curve
hist(df$`Number of animals died`,probability=TRUE,main = "Histogram with normal curve of animals that died")
lines(density(df$`Number of animals died`))

#test for normality
shapiro.test(df$`Number of animals died`) #not normal
#test if the continuous variable is correlated to coping
#run a wilcoxon test
wilcox.test(df$`Number of animals died`~df$`Able to Cope with drought`)
#run a point Biserial 
cor.test(df$`Number of animals before drought`,df$Binary)

#convert continuous to categorical
df$died_category <- cut(df$`Number of animals died`, 
                   breaks=c(-1,5,11,17,22 ), 
                   labels=c("0","1","2","3"))

df$sold_category <- cut(df$`Number of animals sold`,
                        breaks=c(-1,10,20,30,40,55),
                        labels=c("0","1","2","3","4"))

library(dplyr)
count(df,df$died_category)
#Categorical data
f<-table() #freq
f
round(prop.table(f),3) #proportion
round(prop.table(f),3)*100 #percentages
m<-table(df$`Able to Cope with drought`, df$`Supplementary feed before`) #2 way table frequency
m
round(100*prop.table(m,2),3)
#test for associations 
chisq.test(df$`Able to Cope with drought`,df$sold_category,simulate.p.value = TRUE)
chisq.test(df$`Able to Cope with drought`,df$`Supplementary feed before`)

#Convert from int to factor
df$`Education level` <- factor(df$`Education level`)
df$Agriculture_name<- factor(df$Agriculture_name)
df$`What you did to prepare` <- factor(df$`What you did to prepare`)
df$`Supplementary feed before`<- factor(df$`Supplementary feed before`)
df$`Supplementary feed during` <- factor(df$`Supplementary feed during`)
df$`Water source` <- factor(df$`Water source`)
df$`Livestock management change` <- factor(df$`Livestock management change`)

#Set reference level 
df$`Education level`<- relevel(df$`Education level`,ref="No_education")
table(df$`Education level`)
df$`What you did to prepare` <- relevel(df$`What you did to prepare`,ref="Sold animal")
table(df$`What you did to prepare`)
df$`Water source` <- relevel(df$`Water source`,ref="Borehole")
table(df$`Water source`)
df$`Livestock management change` <- relevel(df$`Livestock management change`,ref="Restricted feeding")
table(df$`Livestock management change`)

#Logistic model 
model1 <- glm(formula = Binary ~ df$`Education level`+df$Agriculture_name+df$`What you did to prepare`
              +df$`Supplementary feed before`
              +df$`Supplementary feed during`+df$`Water source`+df$`Livestock management change`,family="binomial",data=df)

summary(model1)
library(pscl)
#Pseudo R2
pR2(model1)
#Another Pseudo R2
library(rcompanion)
nagelkerke(model1)

library(ResourceSelection)
#hosmer lemershow test(test for model fit)
hl <- hoslem.test(df$Binary, fitted(model1), g=8)
hl
#wald test(test for individual predictors)
library(survey)
regTermTest(model1,"df$`Water source`")


#validation of predicted values
library(ROCR)
# Compute AUC for predicting Class with the model
prob <- predict(model1, df, type="response")
pred <- prediction(prob, df$Binary)
perf <- performance(pred, measure = "tpr", x.measure = "fpr") #performance
plot(perf,main="ROC curve")

auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
